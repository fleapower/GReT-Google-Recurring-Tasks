// v 1.4
// 12MAR19

// ***** SETUP *****

// In the DuplicateRecTask function below, set your time zone (TZOffset)
// and if you want your tasks archived (Archive) or not by setting the
// appropriate variables.

// The function createDailyTrigger will automatically set up a trigger to
// run at midnight and recur the tasks.  You may modify the function below
// to set up a trigger at a different time and/or interval or set up the
// trigger manually.  To have the trigger set up automatically:
//   1) Click Run -> Run Function -> createDailyTrigger
//   2) Authorization Required -> Review Permissions
//   3) Select the appropriate account.
//   4) Allow.


// ***** SYNTAX *****
// 
// To recur on a set interval after task completion, use r:##x
// For a specific day of the week or month, use r:xDD
// For a specific date of the year, use r:yMMDD
// To keep the annotation order straight in your mind, think of the syntax this way:
//      Recur after task completion, "Recur every 4 days."  The string would be r:04d ('d' is last, just like in the sentence)
//      Recur on the same day of the week, "Recur weekly on the 5th day."  The string would be r:w05 ('w' is first)
// More examples:
//      Every day:  r:01d
//      Every two days:  r:02d
//      Every three weeks:  r:03w
//      Every three months:  r:03m
//      Every Tuesday:  r:w03
//      28th of each month:  r:m28
//      Every two years:  r:01y
//      Every year on a August 10th:  r:y0810


function createDailyTrigger() {
  ScriptApp.newTrigger('DuplicateRecTask')
  .timeBased()
  .atHour(0)  // Trigger at midnight based on time zone.
  .everyDays(1) // Frequency is required if you are using atHour() or nearMinute()
  .create();
}

function DuplicateRecTask() {
  // TZOffset and Archive need to be set:
  // Set your local time zone offset:  5 for EST, 8 for PST
  var TZOffset = 5;
  // Set Archive to 1 if you want to move completed tasks into the Archive spreadsheet and deleted from tasks; otherwise they will be marked complete
  var Archive = 1;
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Archived"); 
  var taskLists = Tasks.Tasklists.list();
  var Today = new Date();
  var Dup_Pause = 1; // variable to set up pause to prevent quota errors
  
  Today.setDate(Today.getDate());
  Today.setHours(Today.getHours()-TZOffset);
  Today = Today.toISOString();
  if (taskLists.items) {
    for (var i = 0; i < taskLists.items.length; i++) {
      Dup_Pause++;
      if (Dup_Pause>5) {
        Utilities.sleep(2000); // sleep for two seconds every five tasks to prevent quota errors
        Dup_Pause=1;
      }
      var taskList = taskLists.items[i];
      var TASK_LIST_ID = taskList.id;
      // var tasks = Tasks.Tasks.list(TASK_LIST_ID,{'completedMin':'2010-08-09T10:57:00.000-08:00','showHidden':'True'});
      var tasks = Tasks.Tasks.list(TASK_LIST_ID,{'completedMax':Today,'showHidden':'True'});
      if (tasks.items) {
        for (var j = 0; j < tasks.items.length; j++) {
          var task = tasks.items[j]
          var TASK_ID = task.id;

          // Retrieve the original task.
          var oldtask = Tasks.Tasks.get(TASK_LIST_ID, TASK_ID);

          // Only check completed tasks with "r:" in the title.
          if (oldtask.title.indexOf('r:') !== -1 && oldtask.status=="completed") {
            // Create new task.
            var newtask = Tasks.newTask();
            newtask.title = oldtask.title;
            newtask.position = oldtask.position;
            newtask.notes = oldtask.notes;
            // Tasks.Tasks.move (TASK_LIST_ID,newtask.id,oldtask.parent);
            
            // Extract recurring string.
            var RecStr = newtask.title.replace(/.*r:(\S*).*/, "$1");
            var RecInt;
            
            // Set interval for next recurrence.
            var dueDate = new Date(oldtask.due);
            dueDate.setHours(dueDate.getHours()+TZOffset);
            if (!isNaN(parseFloat(RecStr.substring(0,1))) && isFinite(RecStr.substring(0,1))) {
              RecInt = Number(RecStr.substring (0,2));
              switch (RecStr.substring(2,3)) {
                case 'd':
                  dueDate.setDate(dueDate.getDate()+RecInt);
                  break;
                case 'w':
                  dueDate.setDate(dueDate.getDate()+(RecInt*7));
                  break;
                case 'm':
                  dueDate.setMonth(dueDate.getMonth() + RecInt);
                  break;
                case 'y':
                  dueDate.setYear(dueDate.getYear() + RecInt);
                  break;
              }
            }
            else {
              RecInt = Number(RecStr.substring (1,3));
              switch (RecStr.substring (0,1)) {
                case 'w':
                  var AddWeek = (dueDate.getDay() < RecInt - 1 ) ? 0:1;
                  dueDate.setDate(dueDate.getDate() + (7 * AddWeek) - dueDate.getDay() + RecInt -1);
                  break;
                case 'm':
                  var AddMonth = (dueDate.getDate() < RecInt - 1) ? 0:1;
                  dueDate.setMonth(dueDate.getMonth()+AddMonth,RecInt-1);
                  break;
                case 'y':
                  var RecMo = RecInt;
                  var RecDay = Number(RecStr.substring (3,5));
                  var LastDay = new Date(dueDate.getFullYear(), dueDate.getMonth() + 1, 0);
                  var AddLast = (dueDate.getDate() == LastDay.getDate()) ? dueDate.getDate():0;
                  var AddYear = ((dueDate.getMonth() + 1 >= RecMo) || (dueDate.getMonth() + 2 == RecMo && dueDate.getDate() < RecDay + AddLast)) ? 1:0;
                  dueDate.setFullYear(dueDate.getFullYear() + AddYear, RecMo-1, RecDay-1);
                  break;
              }
            }
            
            // Adjust for DST.
            if (dueDate.getTimezoneOffset() < new Date(oldtask.due).getTimezoneOffset()) {
              dueDate.setDate(dueDate.getDate()+1);
            }
        
            newtask.due = dueDate.toISOString();

            // Add new task.
            var newTask = Tasks.Tasks.insert(newtask, TASK_LIST_ID);
  
            // Make old task non-recurring.  Replace "r:" with an "rd:" to indicate it recurred but is excluded for future recurrences.
            oldtask.title = oldtask.title.replace("r:", "rd:");
            var updatedTask = Tasks.Tasks.update(oldtask, TASK_LIST_ID, TASK_ID);
          }
          // If Archive set to 1, archive all completed tasks to spreadsheet (recurring or not)
          if (Archive = 1) {
            sheet.appendRow([oldtask.title,oldtask.due,oldtask.completed,oldtask.notes,taskList.title]);
            oldtask.deleted = "True";
            var updatedTask = Tasks.Tasks.update(oldtask, TASK_LIST_ID, TASK_ID);
          }
        }
      }
    }
  }
}
